class Queue:
	def __init__(self):
		self.list=[]
	def enqueue(self,v):
		self.list.append(v)
	def dequeue(self):
		return self.list.pop(0)
	def front(self):
		return self.list[0]
	def printQueue(self):
		print(self.list)
	def isEmpty(self):
		return len(self.list)==0
	def size(self):
		return len(self.list)

def checkAll(l,r,c):
	for i in range(r):
		for j in range(c):
			if li[i][j]==1:
				return False
	return True

def isValid(i,j,r,c):
	if i>=0 and j>=0 and i<r and j<c:
		return True
	else:
		return False

def delim(x):
	if x[0]==-1 and x[1]==-1:
		return True
	else:
		return False

def findRot(li,r,c):
	q=Queue()
	ans=0
	temp=[]
	for i in range(r):
		for j in range(c):
			if li[i][j]==2:
				temp=[i,j]
				q.enqueue(temp)
	temp=[-1,-1]
	q.enqueue(temp)
	while not q.isEmpty():
		flag=False
		while not delim(q.front()):
			tmp=q.front()
			if tmp[0]!=r-1 and isValid(tmp[0]+1,tmp[1],r,c) and li[tmp[0]+1][tmp[1]]==1:
				if not flag:
					flag=True
					ans+=1
				li[tmp[0]+1][tmp[1]]=2
				t=[tmp[0]+1,tmp[1]]
				q.enqueue(t)
			if tmp[0]!=0 and isValid(tmp[0]-1,tmp[1],r,c) and li[tmp[0]-1][tmp[1]]==1:
				if not flag:
					flag=True
					ans+=1
				li[tmp[0]-1][tmp[1]]=2
				t=[tmp[0]-1,tmp[1]]
				q.enqueue(t)
			if tmp[1]!=c-1 and isValid(tmp[0],tmp[1]+1,r,c) and li[tmp[0]][tmp[1]+1]==1:
				if not flag:
					flag=True
					ans+=1
				li[tmp[0]][tmp[1]+1]=2
				t=[tmp[0],tmp[1]+1]
				q.enqueue(t)
			if tmp[1]!=0 and isValid(tmp[0],tmp[1]-1,r,c) and li[tmp[0]][tmp[1]-1]==1:
				if not flag:
					flag=True
					ans+=1
				li[tmp[0]][tmp[1]-1]=2
				t=[tmp[0],tmp[1]-1]
				q.enqueue(t)
			q.dequeue()
		q.dequeue()
		if not q.isEmpty():
			temp=[-1,-1]
			q.enqueue(temp)
	#print(li)
	if checkAll(li,r,c):
		return ans
	else:
		return -1
	
li=[[2,1,0,2,1],[1,0,1,2,1],[1,0,0,2,0]]
print(findRot(li,3,5))
