class Node:
	def __init__(self,v):
		self.val=v
		self.next=None
class LL:
	def __init__(self):
		self.head=None
	def insert(self,v):
		node=Node(v)
		current=self.head
		if current==None:
			self.head=node
		else:
			while current.next!=None:
				current=current.next
			current.next=node
	def printLL(self):
		current=self.head
		while current!=None:
			print(current.val,end=" ")
			current=current.next
		print()

def sortMerge(a,b):
	if a is None:
		return b
	if b is None:
		return a
	if a.val<=b.val:
		rslt=a
		rslt.next=sortMerge(a.next,b)
	else:
		rslt=b
		rslt.next=sortMerge(a,b.next)
	return rslt

def getMiddle(h):
	if h is None:
		return h
	fast=h.next
	slw=h
	while fast is not None:
		fast=fast.next
		if fast is not None:
			slw=slw.next
			fast=fast.next
	return slw

def mergeSort(h):
	if h is None or h.next is None:
		return h
	m=getMiddle(h)
	m1=m.next
	
	m.next=None
	
	left=mergeSort(h)
	right=mergeSort(m1)
	
	return sortMerge(left,right)

l=LL()
l.insert(13)
l.insert(99)
l.insert(21)
l.insert(80)
l.insert(50)
#l.insert(7)
l.head=mergeSort(l.head)
l.printLL()
