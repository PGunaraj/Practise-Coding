# your code goes here
class BinaryTree:
	def __init__(self,r):
		self.root=r
		self.left=None
		self.right=None
	def getLeft(self):
		return self.left
	def getRight(self):
		return self.right
	def getRoot(self):
		return self.root
	def insertLeft(self,val):
		if self.left==None:
			self.left=BinaryTree(val)
		else:
			t=BinaryTree(val)
			t.left=self.left
			self.left=t
	def insertRight(self,val):
		if self.right==None:
			self.right=BinaryTree(val)
		else:
			t=BinaryTree(val)
			t.right=self.right
			self.right=t
	def deleteLeft(self):
		if self.left:
			temp=self.left
			if temp.left and temp.right:
				self.left=temp.left
				self.left.right=temp.right
			elif temp.left:
				self.left=temp.left
			elif temp.right:
				self.left=temp.right
	def deleteRight(self):
		if self.right:
			temp=self.right
			if temp.left and temp.right:
				self.right=temp.left
				self.right.right=temp.right
			elif temp.left:
				self.right=temp.left
			elif temp.right:
				self.right=temp.right
			else:
				self.root=None
	def preorder(self):
		print(self.root,end=" ")
		if self.left:
			self.left.preorder()
		if self.right:
			self.right.preorder()
	def inorder(self):
		if self.left:
			self.left.inorder()
		print(self.root, end=" ")
		if self.right:
			self.right.inorder()
	def postorder(self):
		if self.left:
			self.left.postorder()
		if self.right:
			self.right.postorder()
		print(self.root,end=" ")
def levelorder(root):
	if root is None:
		return
	q=[root]
	while len(q)>0:
		#print(q)
		t=q.pop(0)
		print(t.root, end=" ")
		if t.left:
			q.append(t.left)
def height(root):
	if root is None:
		return 0
	else:
		return max(height(root.left),height(root.right))+1
		if t.right:
			q.append(t.right)

x=BinaryTree('a')
x.insertLeft('b')
x.insertRight('c')
l=x.getLeft()
l.insertLeft('x')
l.insertRight('d')
r=x.getRight()
r.insertLeft('e')
r.insertRight('f')
x.deleteLeft()
#print(x.getRoot(),l.getRoot(),l.getRight().getRoot(), r.getRoot(), r.getLeft().getRoot(),r.getRight().getRoot())
#x.preorder()
#x.inorder()
#x.postorder()
levelorder(x)
print(height(x))
